import numpy as np
import pandas as pd
import cvxpy as cp

def optimize_sharpe_with_constraints(
    returns: pd.DataFrame,
    drawdown: pd.Series,
    hit_rate: pd.Series,
    D_max: float,
    H_min: float,
    w_min: float = 0.0,
    w_max: float = 1.0
):
    """
    Sharpe ratio maximization with hard constraints:
    - full investment
    - weight bounds
    - drawdown limit
    - minimum hit rate
    """
    N = returns.shape[1]

    mu = returns.mean().values
    Sigma = np.cov(returns.T)

    # Variables
    w = cp.Variable(N)

    # Portfolio return and risk
    port_return = mu @ w
    port_risk = cp.norm(cp.matmul(cp.sqrt(Sigma), w), 2)  # √(wᵀΣw)

    # Objective: maximize Sharpe ratio = return / risk
    # Reformulated as: maximize t, such that return ≥ t * risk
    t = cp.Variable()  # Sharpe ratio proxy

    constraints = [
        cp.sum(w) == 1,
        w >= w_min,
        w <= w_max,
        drawdown.values @ w <= D_max,
        hit_rate.values @ w >= H_min,
        port_return >= t * port_risk
    ]

    problem = cp.Problem(cp.Maximize(t), constraints)
    problem.solve(solver=cp.SCS)

    if problem.status not in ["optimal", "optimal_inaccurate"]:
        raise ValueError(f"Optimization failed: {problem.status}")

    return pd.Series(w.value, index=returns.columns, name="Weight")


# Mock data
N = 10
T = 252
np.random.seed(0)

returns = pd.DataFrame(np.random.randn(T, N) * 0.01, columns=[f'Model_{i}' for i in range(N)])
drawdown = pd.Series(np.random.uniform(0.1, 0.4, N), index=returns.columns)
hit_rate = pd.Series(np.random.uniform(0.4, 0.7, N), index=returns.columns)

# Constraints
D_max = 0.25      # max 25% drawdown
H_min = 0.55      # min 55% hit rate

weights = optimize_sharpe_with_constraints(
    returns=returns,
    drawdown=drawdown,
    hit_rate=hit_rate,
    D_max=D_max,
    H_min=H_min
)

print(weights.round(4))
